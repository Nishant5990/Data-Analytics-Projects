#   1.	What is the total revenue generated from all rentals in the database? 
SELECT SUM(amount) AS total_revenue FROM Payment;
#  2.	How many rentals were made in each month_name? 
SELECT DATE_FORMAT(rental_date, '%Y-%m') AS month, COUNT(*) AS rental_count FROM Rental GROUP BY month ORDER BY month;
#  3.	What is the rental rate of the film with the longest title in the database?
SELECT rental_rate FROM Film WHERE LENGTH(title) = (SELECT MAX(LENGTH(title)) FROM Film);
#  4.What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 
SELECT AVG(rental_rate) AS average_rental_rate FROM Film WHERE film_id IN ( SELECT inventory_id FROM Rental WHERE rental_date >= '2005-04-05 22:04:30' AND rental_date <= '2005-05-05 22:04:30');
#  5.	What is the most popular category of films in terms of the number of rentals? 
SELECT c.name AS category_name, COUNT(*) AS rental_count FROM Category c JOIN Film_category fc ON c.category_id = fc.category_id JOIN Film f ON fc.film_id = f.film_id JOIN Rental r ON f.film_id = r.inventory_id GROUP BY c.category_id ORDER BY rental_count DESC LIMIT 1;
#  6.	Find the longest movie duration from the list of films that have not been rented by any customer
SELECT MAX(length) AS longest_duration FROM Film WHERE film_id NOT IN ( SELECT DISTINCT inventory_id FROM Rental );
#  7.	What is the average rental rate for films, broken down by category?
SELECT c.name AS category_name, AVG(f.rental_rate) AS average_rental_rate FROM Category c JOIN Film_category fc ON c.category_id = fc.category_id JOIN Film f ON fc.film_id = f.film_id GROUP BY c.category_id ORDER BY category_name;

# 8.	What is the total revenue generated from rentals for each actor in the database? 
SELECT
    a.actor_id,
    CONCAT(a.first_name, ' ', a.last_name) AS actor_name,
    SUM(p.amount) AS total_revenue
FROM Actor a JOIN Film_Actor fa ON a.actor_id = fa.actor_id JOIN Film f ON fa.film_id = f.film_id JOIN Inventory i ON f.film_id = i.film_id
JOIN Rental r ON i.inventory_id = r.inventory_id JOIN Payment p ON r.rental_id = p.rental_id GROUP BY a.actor_id ORDER BY total_revenue DESC;

#  9.	Show all the actresses who worked in a film having a "Wrestler" in the description.
SELECT DISTINCT
    a.actor_id,
    CONCAT(a.first_name, ' ', a.last_name) AS actress_name
FROM Actor a
JOIN Film_Actor fa ON a.actor_id = fa.actor_id
JOIN Film f ON fa.film_id = f.film_id
WHERE LOWER(f.description) LIKE '%wrestler%'
AND LOWER(a.first_name) LIKE '%a%'  -- Assuming that actresses have 'a' in their first name
ORDER BY actress_name;

#  10.	Which customers have rented the same film more than once? 
SELECT
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    r.inventory_id,
    f.title,
    COUNT(*) AS rental_count
FROM Customer c
JOIN Rental r ON c.customer_id = r.customer_id
JOIN Inventory i ON r.inventory_id = i.inventory_id
JOIN Film f ON i.film_id = f.film_id
GROUP BY c.customer_id, r.inventory_id
HAVING rental_count > 1
ORDER BY customer_name, rental_count DESC;

# 11.	How many films in the comedy category have a rental rate higher than the average rental rate? 
SELECT COUNT(*) AS comedy_films_count FROM Film f JOIN Film_category fc ON f.film_id = fc.film_id JOIN Category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy' AND f.rental_rate > (SELECT AVG(rental_rate) FROM Film);

#  12.	Which films have been rented the most by customers living in each city?
WITH RankedRentals AS (
    SELECT
        c.city_id,
        f.film_id,
        f.title,
        RANK() OVER (PARTITION BY c.city_id ORDER BY COUNT(*) DESC) AS rental_rank
    FROM Customer cu
    JOIN Address a ON cu.address_id = a.address_id
    JOIN City c ON a.city_id = c.city_id
    JOIN Rental r ON cu.customer_id = r.customer_id
    JOIN Inventory i ON r.inventory_id = i.inventory_id
    JOIN Film f ON i.film_id = f.film_id
    GROUP BY c.city_id, f.film_id, f.title
)
SELECT
    rr.city_id,
    c.city,
    rr.film_id,
    rr.title,
    rr.rental_rank
FROM RankedRentals rr
JOIN City c ON rr.city_id = c.city_id
WHERE rr.rental_rank = 1;

 #  13.	What is the total amount spent by customers whose rental payments exceed $200? 
 SELECT
    cu.customer_id,
    CONCAT(cu.first_name, ' ', cu.last_name) AS customer_name,
    SUM(p.amount) AS total_amount_spent
FROM Customer cu
JOIN Payment p ON cu.customer_id = p.customer_id
WHERE p.amount > 200
GROUP BY cu.customer_id, customer_name;
# 14.	Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] 
SELECT CONSTRAINT_NAME,TABLE_NAME,COLUMN_NAME,REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_NAME = 'Rental'AND CONSTRAINT_NAME LIKE 'FK%';

# 15.	Create a View for the total revenue generated by each staff member, broken down by store city with the country name
CREATE VIEW StaffRevenueViewthree AS    #Have to change each time
SELECT
    s.staff_id,
    CONCAT(s.first_name, ' ', s.last_name) AS staff_name,
    c.city AS store_city,
    co.country AS store_country,
    SUM(p.amount) AS total_revenue
FROM Staff s
JOIN Store st ON s.store_id = st.store_id
JOIN Address a ON st.address_id = a.address_id
JOIN City c ON a.city_id = c.city_id
JOIN Country co ON c.country_id = co.country_id
JOIN Payment p ON s.staff_id = p.staff_id
GROUP BY s.staff_id, staff_name, store_city, store_country;

SELECT * FROM StaffRevenueView;

# 16.	Create a view based on rental information consisting of visiting_day, customer_name, the title of the film,  no_of_rental_days, the amount paid by the customer along with the percentage of customer spending
CREATE VIEW RentalInfoViewone AS                   #Changed esach time
SELECT
    DATE_FORMAT(r.rental_date, '%Y-%m-%d') AS visiting_day,
    CONCAT(cu.first_name, ' ', cu.last_name) AS customer_name,
    f.title AS film_title,
    DATEDIFF(r.return_date, r.rental_date) AS no_of_rental_days,
    p.amount AS amount_paid,
    (p.amount / (SELECT SUM(amount) FROM Payment WHERE customer_id = cu.customer_id) * 100) AS spending_percentage
FROM Rental r
JOIN Customer cu ON r.customer_id = cu.customer_id
JOIN Inventory i ON r.inventory_id = i.inventory_id
JOIN Film f ON i.film_id = f.film_id
JOIN Payment p ON r.rental_id = p.rental_id;

SELECT * FROM RentalInfoViewone;

# 17.	Display the customers who paid 50% of their total rental costs within one day
CREATE VIEW HighPaymentCustomers AS
SELECT
    p.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(p.amount) AS total_amount_paid,
    (SELECT SUM(amount) FROM Payment WHERE customer_id = c.customer_id) AS total_rental_costs,
    DATEDIFF(MAX(r.return_date), MIN(r.rental_date)) AS rental_duration
FROM Payment p
JOIN Rental r ON p.rental_id = r.rental_id
JOIN Customer c ON p.customer_id = c.customer_id
GROUP BY p.customer_id, customer_name
HAVING total_amount_paid >= 0.5 * total_rental_costs
   AND rental_duration <= 1;
   
SELECT * FROM HighPaymentCustomers;






 





